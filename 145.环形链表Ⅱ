/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 /**
  *快慢指针
  *slow=a+b, fast=a+b+c+b=2*(a+b), 所以a=c
  *meet结点再继续a次，head结点再继续a次，相遇在入环第一个结点
  */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        //jugde the cycle
        while(true){
            //fast is faster the slow, so just jugde the fast is oK 
            if(fast == null || fast.next == null) return null;
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow) break;
        }
        fast = head;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return fast;
        
        
    }
}
